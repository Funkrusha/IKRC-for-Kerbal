using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.Events;
using UnityEngine.EventSystems;
using KSP.IO;

// FELADATOK:
// - Plugin run only flight mode ???
// - repair user controls
// - rerotate servo problem

namespace IkRobotController
{
    [KSPAddon(KSPAddon.Startup.Flight, false)]
    public class IkRobotController : PartModule
    {
        private static bool IsInitedModule = false;

        private static Rect windowRectangle;
        private static Vector2 windowPosition = new Vector2(10, 10);
        private static Vector2 windowSize = new Vector2(310, 600);
        private static Rect inputRect;
        private static ConfigNode nodeInner;
        private static bool IK_active = false;
        private static bool servotransform = false;
        private static bool zeroThetaIterate = false;
        private static bool clearThetasBool = false;
        private static bool baseStateBool = false;
        private static bool actualStateBool = false;
        private static bool pdgfStateBool = false;
        private static bool ircWindowActive = true;
        private static float Yoffset = 0;
        private static float servoSpeed = 0.25f;
        private static float transStep = 0.25f;
        private static float rotStep = 0.25f;

        private static string iterateString = "500";
        private static string samplingAngleString = "0.02";
        private static string DistanceThresholdString = "0.01";
        private static string AngleThresholdString = "0.5";
        private static string MaxPosErrString = "10";
        private static string MaxOriErrString = "180";
        private static string[] thetaString = { "0", "0", "0", "0", "0", "0", "0" };

        private static Rect diagramRectangle = new Rect(10, 525, 290, 70);
        private static List<float> iterateData;
        private static List<float> sampleAngleData;
        private static List<List<float>> data;

        public class VectorSM
        {
            public Vector3 Translation;
            public Quaternion Rotation;

            public VectorSM()
            {
                Translation = new Vector3();
                Rotation = Quaternion.identity;
            }
        }

        public class LocationRotationDiff
        {
            public float LocationDiff;
            public float RotationDiff;

            public LocationRotationDiff()
            {
            }
        }

        public class Buttons
        {
            public Vector3 Translation;
            public Quaternion Rotation;

            public Buttons()
            {
                Translation = new Vector3();
                Rotation = Quaternion.identity;
            }
        }

        public class IKservo
        {
            public Part part;
            public IRWrapper.IServo iservo;
            public Vector3 StartOffset;
            public Vector3 Position;
            public Quaternion Rotation;
            public Quaternion baseRotation;
            public Quaternion baseTransformRotation;
            public Vector3 Axis;
            public Transform ServoTransform;
            public string name;
            public float MinAngle = -270f;
            public float MaxAngle = 270f;

            public Vector3 StartRotOffset;

            public IKservo(Part part, IRWrapper.IServo iservo)
            {
                this.part = part;
                this.iservo = iservo;
            }

            public IKservo(Part part)
            {
                this.part = part;
            }
        }

        Buttons buttons;
        static List<IRWrapper.IServo> allServos;
        static List<IKservo> AllIkServo;
        static List<IKservo> SortIkServo;
        static List<Part> listOfChildrenPart;
        static VectorSM FKvector = new VectorSM();
        static VectorSM baseState = new VectorSM();
        static GameObject[] servoGimbal = new GameObject[8];
        static Part lastPart;

        private GameObject hoverObject;
        private Mode mode;
        private int limitDepth = 2;

        private enum Mode
        {
            PART,
            UI,
            OBJECT
        }

        string[] JointList = { "TRF.CA2.ARoll", "TRF.CA2.AYaw", "TRF.CA2.APitch", "TRF.CA2.CElbow", "TRF.CA2.BPitch", "TRF.CA2.BYaw", "TRF.CA2.BRoll", "TRF.CA2.LEE.wCam" };
        Vector3[] JointsAxis = { new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 1, 0), new Vector3(0, 0, 0) };
        // !!! calculate value of JointsRealAxis !!!
        Vector3[] JointsRealAxis = { new Vector3(0, -1, 0), new Vector3(-1, 0, 0), new Vector3(0, 0, 1), new Vector3(0, 0, -1), new Vector3(0, 0, -1), new Vector3(-1, 0, 0), new Vector3(0, -1, 0), new Vector3(0, 0, 0) };
        public static float[] theta = new float[8];

        public static bool[] blocking = new bool[8];
        public static float distance;
        public static float angle;
        public static bool Success = false;
        public static bool IKsuccess = false;
        public static bool Bug = true;

        public static Vector3 globalPosition;
        public static Quaternion globalQuaternion;

        public static int iterateNumber;
        public static float LearningRatePos;
        public static float LearningRateOri;
        public static float SamplingAngle;

        public static float DistanceThreshold;
        public static float Distance;
        public static float AngleThreshold;
        public static float Angle;

        public static float MaxPosErr;
        public static float MaxOriErr;

        public static float DinLearningRatePos;
        public static float DinLearningRateOri;

        public int failedIterateCycle = 0;
        public int iterateThreshold = 10;

        private static Vector3 basePosition;
        private static Quaternion baseQuaternion;

        // Use this for initialization
        public void Start()
        {
            // Set base angle of joints = 0 degree
            theta[0] = theta[1] = theta[2] = theta[3] = theta[4] = theta[5] = theta[6] = theta[7] = 0.0f;
            blocking[0] = blocking[1] = blocking[2] = blocking[3] = blocking[4] = blocking[5] = blocking[6] = blocking[7] = false;
            // Init Buttons
            buttons = new Buttons();

            // Set start position and  start orientation of EndEffector
            globalPosition = new Vector3(0f, 0f, 0f);
            globalQuaternion = Quaternion.Euler(0f, 0f, 0f);

            Debug.Log(string.Format("[TRF] {0} IRWrapper.InitWrapper() START", 1));
            IRWrapper.InitWrapper();
            Debug.Log(string.Format("[TRF] {0} IRWrapper.InitWrapper() END", 2));

            if (IRWrapper.APIReady)
            {
                Debug.Log(string.Format("[TRF] {0} - IRWrapper.APIReady", 21));
                AllIkServo = new List<IKservo>();
                allServos = new List<IRWrapper.IServo>();
                SortIkServo = new List<IKservo>();

                // get parts of vessel
                List<Part> parts = vessel.Parts;

                // Get all servo
                foreach (IRWrapper.IControlGroup group in IRWrapper.IRController.ServoGroups)
                {
                    allServos.AddRange(group.Servos);
                }

                Debug.Log(string.Format("[TRF] {0} - Get all servo ({1})", 22, allServos.Count));

                if (allServos.Count > 0)
                {
                    // Scanning all servos
                    foreach (IRWrapper.IServo iservo in allServos)
                    {
                        foreach (Part part in parts)
                        {
                            // if vessel contain servo and not hinge then add to IKservos
                            if (iservo.HostPart.name == part.name && !iservo.HostPart.name.Contains("Hinge"))
                            {
                                AllIkServo.Add(new IKservo(part, iservo));
                            }
                        }
                    }

                    Debug.Log(string.Format("[TRF] {0} - AllIkServo ({1})", 23, AllIkServo.Count));

                    // Sort IKservos by JointList
                    for (int i = 0; i < JointList.Length; i++)
                    {
                        foreach (IKservo ikServo in AllIkServo)
                        {
                            if (ikServo.part.name == JointList[i])
                            {
                                SortIkServo.Add(ikServo);
                                Debug.Log(string.Format("[TRF] {0} - ikServo " + ikServo.part.name, 24 + i));
                            }
                        }
                    }

                    // Get last part
                    listOfChildrenPart = new List<Part>();
                    GetChildPartRecursive(part);
                    int elementCount = listOfChildrenPart.Count();
                    lastPart = listOfChildrenPart[elementCount - 1];

                    Debug.Log(string.Format("[TRF] {0} - lastPart " + lastPart.name, 40));

                    // Add EndEffector/LEE/ (last part) to SortIkServo - problem -> if LEE hold other element that will last part
                    SortIkServo.Add(new IKservo(lastPart));

                    // if have all IKservo than calculate IK parameters of IKservos 
                    if (SortIkServo.Count == JointList.Length)
                    {
                        Vector3 StartPos = part.transform.position;
                        Quaternion StartRot = part.transform.rotation;
                        int i = 0;
                        // dumping servo structure
                        foreach (IKservo ikServo in SortIkServo)
                        {
                            ikServo.ServoTransform = ikServo.part.transform;
                            ikServo.StartOffset = Quaternion.Inverse(StartRot) * (ikServo.ServoTransform.position - StartPos);
                            ikServo.Axis = part.transform.rotation * JointsRealAxis[i];
                            ikServo.baseRotation = ikServo.ServoTransform.localRotation;
                            ikServo.baseTransformRotation = ikServo.ServoTransform.rotation;
                            ikServo.Position = ikServo.ServoTransform.position;
                            ikServo.Rotation = ikServo.ServoTransform.rotation;
                            StartPos = ikServo.Position;
                            StartRot = ikServo.Rotation;
                            i++;
                        }
                    }
                }
            }
            // set position of last part for global position
            globalPosition = SortIkServo[SortIkServo.Count - 1].ServoTransform.position;
            globalQuaternion = SortIkServo[SortIkServo.Count - 1].ServoTransform.rotation;

            baseState.Translation = globalPosition;
            baseState.Rotation = globalQuaternion;

            // Store base position and base orientation
            basePosition = globalPosition;
            baseQuaternion = globalQuaternion;

            //for (int i = 0; i < SortIkServo.Count; i++)
            //    servoGimbal[i] = new GameObject();

            windowRectangle = new Rect(windowPosition.x, windowPosition.y, windowSize.x, windowSize.y);
            iterateData = new List<float>();
            sampleAngleData = new List<float>();
            data = new List<List<float>>();

            Debug.Log(string.Format("[TRF] {0} END Start() ", 400));
        }

        // Update is called once per frame
        public void Update()
        {
            if (HighLogic.LoadedSceneIsFlight && !IsInitedModule)
            {
                IsInitedModule = true;

                for (int i = 0; i < SortIkServo.Count; i++)
                    servoGimbal[i] = new GameObject();
            }
            else if (ircWindowActive && HighLogic.LoadedSceneIsFlight)
            {
                //Debug.Log(string.Format("[TRF] {0} START Update()", 401));
                GameObject mouseObject = CheckForObjectUnderCursor();
                //if (mouseObject != null)
                //    Debug.Log(string.Format("[TRF] {0} mouseObject " + mouseObject.name, 420));
                //else
                //    Debug.Log(string.Format("[TRF] {0} mouseObject null", 420));

                //string info = mouseObject ? mouseObject.name : "Nothing";
                //Debug.Log(string.Format("[TRF] {0} - info.text " + info, 403));

                bool modPressed = Input.GetKey(KeyCode.LeftAlt);

                if (modPressed && (mouseObject != null))
                {
                    //Debug.Log(string.Format("[TRF] {0} - modPressed active", 500));
                    hoverObject = mouseObject;
                    Debug.Log(string.Format("[TRF] {0} - hoverObject " + hoverObject.name, 501));

                    //    currentDisplayedObject = GetRootObject(hoverObject);
                    //    Debug.Log(string.Format("[TRF] {0} - currentDisplayedObject " + currentDisplayedObject.name, 502));
                }

                // set base state
                if (baseStateBool)
                {
                    globalPosition = basePosition;
                    globalQuaternion = baseQuaternion;

                    for (int i = 0; i < 8; i++)
                        theta[i] = 0f;

                    IK_active = false;

                    // implement angle of joints
                    Bug = !ImplementServoRotation(SortIkServo, theta, servoSpeed);
                }
                // set actual state
                if (actualStateBool)
                {
                    FKvector = ForwardKinematics(theta, SortIkServo);
                    globalPosition = FKvector.Translation;
                    globalQuaternion = FKvector.Rotation;

                    IK_active = false;
                }
                // set pdgf state
                if (pdgfStateBool && (hoverObject != null))
                {
                    globalQuaternion = hoverObject.transform.rotation * Quaternion.Euler(180f, -90f, 0f);
                    globalPosition = hoverObject.transform.position + (globalQuaternion * new Vector3(0f, -0.9f, 0f));

                    IK_active = false;
                }

                if (IK_active)
                {
                    if (buttons.Rotation == Quaternion.Euler(0f, 0.5f * rotStep, 0f) || buttons.Rotation == Quaternion.Euler(0f, -0.5f * rotStep, 0f))
                    {
                        theta[6] += (360f - buttons.Rotation.eulerAngles.y) > 180f ? buttons.Rotation.eulerAngles.y : (buttons.Rotation.eulerAngles.y - 360f);
                        // implement angle of joints
                        Bug = !ImplementServoRotation(SortIkServo, theta, servoSpeed);
                    }

                    // calculate global position of aim

                    // global orientation
                    globalQuaternion = globalQuaternion * buttons.Rotation;
                    // global position
                    globalPosition = globalPosition + globalQuaternion * buttons.Translation;

                    //Debug.Log(string.Format("[TRF] {0} - globalPosition " + VectorToString(globalPosition, "0.00"), 101));

                    //Debug.Log(string.Format("[TRF] {0} - globalRotation " + VectorToString(globalQuaternion.eulerAngles, "0.00"), 102));

                    // clear buttons.Translation & .Rotation
                    ButtonsReleased();

                    //distance = Vector3.Distance(Servos[Servos.Count - 1].ServoTransform.position, globalPosition);
                    //angle = Quaternion.Angle(Quaternion.Euler(Servos[Servos.Count - 1].ServoTransform.rotation.eulerAngles), globalQuaternion);

                    //Debug.Log(string.Format("[TRF] {0} - SortIkServo.Count " + SortIkServo.Count.ToString(), 103));

                    distance = Vector3.Distance(SortIkServo[SortIkServo.Count - 1].ServoTransform.position, globalPosition);

                    //Debug.Log(string.Format("[TRF] {0} - distance " + distance.ToString("0.00"), 104));

                    angle = Quaternion.Angle(Quaternion.Euler(SortIkServo[SortIkServo.Count - 1].ServoTransform.rotation.eulerAngles), globalQuaternion);

                    //Debug.Log(string.Format("[TRF] {0} - Eff Rotation " + VectorToString(SortIkServo[SortIkServo.Count - 1].ServoTransform.rotation.eulerAngles, "0.00"), 105));
                    //Debug.Log(string.Format("[TRF] {0} - angle " + angle.ToString("0.00"), 106));

                    if (distance > DistanceThreshold || angle > AngleThreshold)
                    {
                        //Debug.Log(string.Format("[TRF] {0} - distance " + Distance.ToString("0.00"), 200));
                        //Debug.Log(string.Format("[TRF] {0} - angle " + Angle.ToString("0.00"), 201));
                        Success = false;

                        // start iterate from zero thetas
                        if (zeroThetaIterate && IKsuccess)
                        {
                            for (int i = 0; i < 8; i++)
                                theta[i] = 0f;
                        }
                        // clear thetas
                        if (clearThetasBool)
                            for (int i = 0; i < 8; i++)
                                theta[i] = 0f;

                        // iterate angle of joints
                        int j;
                        for (j = 0; j < iterateNumber; j++)
                        {
                            IKsuccess = InverseKinematics(globalPosition, globalQuaternion, theta);
                            if (IKsuccess)
                                break;
                        }

                        iterateData.Add((float)j / (float)iterateNumber * (diagramRectangle.height - 20f));
                        if (iterateData.Count > (int)(diagramRectangle.width - 10f))
                            iterateData.RemoveAt(0);

                        if (j == iterateNumber)
                        {
                            failedIterateCycle++;
                            SamplingAngle = 0.005f;
                        }
                        else
                        {
                            failedIterateCycle = 0;
                            if (j > (iterateNumber / 2))
                            {
                                SamplingAngle = 0.01f;
                            }
                            else
                            {
                                SamplingAngle = 0.02f;
                            }
                        }
                        samplingAngleString = SamplingAngle.ToString();

                        sampleAngleData.Add(SamplingAngle / 0.02f * (diagramRectangle.height - 30f));
                        if (sampleAngleData.Count > (int)(diagramRectangle.width - 10f))
                            sampleAngleData.RemoveAt(0);

                        if (failedIterateCycle > iterateThreshold)
                        {
                            failedIterateCycle = 0;

                            for (int i = 0; i < 8; i++)
                                theta[i] = 0f;
                        }

                        // implement angle of joints
                        Bug = !ImplementServoRotation(SortIkServo, theta, servoSpeed);
                    }
                    else
                    {
                        Success = true;
                    }
                    //Debug.Log(string.Format("[TRF] {0} - Update() END ", 107));
                }
                else
                {
                    // clear buttons.Translation & .Rotation
                    ButtonsReleased();
                    //Debug.Log(string.Format("[TRF] {0} - ButtonsReleased()", 100));
                    FKvector = ForwardKinematics(theta, SortIkServo);
                    //Debug.Log(string.Format("[TRF] {0} - ForwardKinematics(..)", 101));

                    // implement angle of joints
                    Bug = !ImplementServoRotation(SortIkServo, theta, servoSpeed);

                    for (int i = 0; i < 7; i++)
                    {
                        if (blocking[i])
                        {
                            SortIkServo[i].MaxAngle = 0f;
                            SortIkServo[i].MinAngle = 0f;
                        }
                        else
                        {
                            SortIkServo[i].MaxAngle = 270f;
                            SortIkServo[i].MinAngle = -270f;
                        }
                    }
                }

                if (data != null)
                {
                    data.Clear();
                    data.Add(iterateData);
                    data.Add(sampleAngleData);
                }
            }
        }

        private GameObject CheckForObjectUnderCursor()
        {
            //if (EventSystem.current.IsPointerOverGameObject())
            //{
            //    return null;
            //}


            //1000000000000000000101

            if (mode == Mode.UI)
            {
                var pointer = new PointerEventData(EventSystem.current);
                pointer.position = Input.mousePosition;

                var raycastResults = new List<RaycastResult>();
                EventSystem.current.RaycastAll(pointer, raycastResults);

                if (raycastResults.Count == 0)
                {
                    //print("Nothing");
                    return null;
                }
                return raycastResults[0].gameObject;
            }

            if (mode == Mode.PART)
            {
                //if (Mouse.HoveredPart ? Mouse.HoveredPart.gameObject : null != null)
                //{
                //    Debug.Log(string.Format("[TRF] {0} Mode.PART " + Mouse.HoveredPart.gameObject.ToString(), 410));
                //}
                //else
                //{
                //    Debug.Log(string.Format("[TRF] {0} Mode.PART null", 410));
                //}

                return Mouse.HoveredPart ? Mouse.HoveredPart.gameObject : null;
            }

            if (mode == Mode.OBJECT)
            {
                Ray ray = Camera.main.ScreenPointToRay(Input.mousePosition);
                //int layerMask = ~LayerMask.NameToLayer("UI");
                int layerMask = ~0;

                RaycastHit hit;
                if (!Physics.Raycast(ray, out hit, Mathf.Infinity, layerMask))
                {
                    return null;
                }
                return hit.collider.gameObject;
            }

            return null;
        }

        private GameObject GetRootObject(GameObject leaf)
        {
            if (leaf == null)
                return null;

            if (mode == Mode.UI)
            {
                int d = 0;
                while (leaf.transform.parent && !leaf.transform.parent.gameObject.GetComponent<Canvas>() && d < limitDepth)
                {
                    leaf = leaf.transform.parent.gameObject;
                    d++;
                }
                return leaf;
            }

            if (mode == Mode.PART)
            {
                return leaf;
            }

            if (mode == Mode.OBJECT)
            {
                int d = 0;
                while (leaf.transform.parent && d < limitDepth)
                {
                    leaf = leaf.transform.parent.gameObject;
                    d++;
                }
                return leaf;
            }

            return null;
        }

        public void OnRenderObject()
        {
            if (ircWindowActive)
            {
                if (servotransform)
                {
                    //Debug.Log(string.Format("[TRF] {0} - !IK_active ", 102));
                    for (int i = 0; i < (servoGimbal.Length - 1); i++)
                    {
                        DrawTools.DrawTransform(servoGimbal[i].transform, 0.3f);
                        //Debug.Log(string.Format("[TRF] {0} - DrawTransform[{1}]", 103, i));
                    }

                    if (hoverObject != null)
                        DrawTools.DrawTransform(hoverObject.transform, 0.3f);

                    DrawTools.DrawTransform(SortIkServo[SortIkServo.Count - 1].ServoTransform, 0.3f);
                }
            }
        }

        [KSPEvent(guiActive = true, guiName = "Turn on IRC")]
        public void TurnOnIRCEvent()
        {
            // This will hide the TurnOnIRCEvent event, and show the TurnOffIRCEvene event.
            Events["TurnOnIRCEvent"].active = false;
            Events["TurnOffIRCEvent"].active = true;
            ircWindowActive = true;
        }

        [KSPEvent(guiActive = true, guiName = "Turn off IRC", active = false)]
        public void TurnOffIRCEvent()
        {
            // This will hide the TurnOffIRCEven event, and show the TurnOnIRCEvent event.
            Events["TurnOnIRCEvent"].active = true;
            Events["TurnOffIRCEvent"].active = false;
            ircWindowActive = false;
            OnSave(nodeInner);
        }

        public override void OnSave(ConfigNode node)
        {
            PluginConfiguration config = PluginConfiguration.CreateForType<IkRobotController>();

            windowPosition.x = windowRectangle.x;
            windowPosition.y = windowRectangle.y;
            config.SetValue("IRC Window Position", windowPosition);
            config.save();
        }

        public override void OnLoad(ConfigNode node)
        {
            PluginConfiguration config = PluginConfiguration.CreateForType<IkRobotController>();

            config.load();
            windowPosition = config.GetValue<Vector2>("IRC Window Position");
            windowRectangle = new Rect(windowPosition.x, windowPosition.y, windowSize.x, windowSize.y);
            ircWindowActive = false;
            nodeInner = node;
        }

        public void OnDisable()
        {
            OnSave(nodeInner);
            IK_active = false;
            ircWindowActive = false;
            servotransform = false;
            IsInitedModule = false;
        }

        public void Destroy()
        {
            OnSave(nodeInner);
            IK_active = false;
            ircWindowActive = false;
            servotransform = false;
            IsInitedModule = false;
        }

        #region GUI
        public void ButtonsReleased()
        {
            buttons.Translation = new Vector3(0f, 0f, 0f);
            buttons.Rotation = Quaternion.identity;
        }

        public void OnGUI()
        {
            if (ircWindowActive)
            {
                // Draw window
                windowRectangle = GUILayout.Window(10, windowRectangle, OnWindow, "IK Robot Controller");
            }
        }

        public void OnWindow(int windowID)
        {
            GUILayout.BeginHorizontal();

            // Translation buttons
            if (GUI.RepeatButton(new Rect(10, 70, 30, 30), "◄"))
                buttons.Translation.z = 0.025f * transStep;
            if (GUI.RepeatButton(new Rect(80, 70, 30, 30), "►"))
                buttons.Translation.z = -0.025f * transStep;
            if (GUI.RepeatButton(new Rect(45, 35, 30, 30), "▲"))
                buttons.Translation.x = -0.025f * transStep;
            if (GUI.RepeatButton(new Rect(45, 105, 30, 30), "▼"))
                buttons.Translation.x = 0.025f * transStep;
            if (GUI.RepeatButton(new Rect(10, 105, 30, 30), "●"))
                buttons.Translation.y = -0.025f * transStep;
            if (GUI.RepeatButton(new Rect(80, 35, 30, 30), "•"))
                buttons.Translation.y = 0.025f * transStep;

            // Rotation buttons
            if (GUI.RepeatButton(new Rect(120, 70, 30, 30), "˅ʘ"))
                buttons.Rotation = Quaternion.Euler(0f, 0.5f * rotStep, 0f);
            if (GUI.RepeatButton(new Rect(190, 70, 30, 30), "ʘ˅"))
                buttons.Rotation = Quaternion.Euler(0f, -0.5f * rotStep, 0f);
            if (GUI.RepeatButton(new Rect(155, 35, 30, 30), "˄"))
                buttons.Rotation = Quaternion.Euler(0f, 0f, 0.5f * rotStep);
            if (GUI.RepeatButton(new Rect(155, 105, 30, 30), "˅"))
                buttons.Rotation = Quaternion.Euler(0f, 0f, -0.5f * rotStep);
            if (GUI.RepeatButton(new Rect(120, 105, 30, 30), "˂"))
                buttons.Rotation = Quaternion.Euler(0.5f * rotStep, 0f, 0f);
            if (GUI.RepeatButton(new Rect(190, 35, 30, 30), "˃"))
                buttons.Rotation = Quaternion.Euler(-0.5f * rotStep, 0f, 0f);

            // IK active toggle
            IK_active = GUI.Toggle(new Rect(15, 15, 70, 20), IK_active, " IK active");
            // transform of servos toggle
            servotransform = GUI.Toggle(new Rect(100, 15, 80, 20), servotransform, " servoTRF");
            // zeroTheta iterate toggle
            zeroThetaIterate = GUI.Toggle(new Rect(220, 15, 80, 20), zeroThetaIterate, " 0ƟIterate");
            // set aim position and orientation to actual state
            actualStateBool = GUI.Button(new Rect(250, 35, 40, 20), "acSt");
            // clear values of Theta
            clearThetasBool = GUI.Button(new Rect(250, 60, 40, 20), "clrƟ");
            // set base position and orientation
            baseStateBool = GUI.Button(new Rect(250, 85, 40, 20), "0St");
            // set selected position and orientation
            pdgfStateBool = GUI.Button(new Rect(250, 110, 40, 20), "pdgf");

            // Close window button
            if (GUI.Button(new Rect(290, 3, 17, 15), "x"))
            {
                ircWindowActive = false;
                // This will hide the TurnOffIRCEven event, and show the TurnOnIRCEvent event.
                Events["TurnOnIRCEvent"].active = true;
                Events["TurnOffIRCEvent"].active = false;
                ircWindowActive = false;
                OnSave(nodeInner);
            }

            // Success value
            GUI.Toggle(new Rect(210, 280, 80, 20), Success, " Success");
            // IK_Success value
            GUI.Toggle(new Rect(210, 300, 80, 20), IKsuccess, " IK Success");
            // Bug value
            GUI.Toggle(new Rect(210, 320, 80, 20), Bug, " Bug");

            // Theta values
            Yoffset = 0;
            inputRect = new Rect(210, 140, 50, 20);
            for (int i = 0; i < 7; i++)
            {
                if (IK_active)
                    AddOutputValue(inputRect, "Ɵ[" + i.ToString() + "]", theta[i], 30f);
                else
                {
                    thetaString[i] = theta[i].ToString("0.000");
                    AddInputValue(inputRect, thetaString[i], out thetaString[i], "Ɵ[" + i.ToString() + "]", out theta[i], 30f);
                }
            }

            //Theta blocker
            blocking[0] = GUI.Toggle(new Rect(292, 140, 20, 20), blocking[0], "");
            blocking[1] = GUI.Toggle(new Rect(292, 160, 20, 20), blocking[1], "");
            blocking[2] = GUI.Toggle(new Rect(292, 180, 20, 20), blocking[2], "");
            blocking[3] = GUI.Toggle(new Rect(292, 200, 20, 20), blocking[3], "");
            blocking[4] = GUI.Toggle(new Rect(292, 220, 20, 20), blocking[4], "");
            blocking[5] = GUI.Toggle(new Rect(292, 240, 20, 20), blocking[5], "");
            blocking[6] = GUI.Toggle(new Rect(292, 260, 20, 20), blocking[6], "");

            // IK values
            Yoffset = 0;
            inputRect = new Rect(10, 140, 40, 20);
            AddInputValue(inputRect, iterateString, out iterateString, "IK_iterate", out iterateNumber, 140f);
            AddInputValue(inputRect, samplingAngleString, out samplingAngleString, "IK_samplingAngle", out SamplingAngle, 140f);
            AddInputValue(inputRect, DistanceThresholdString, out DistanceThresholdString, "IK_DistanceThreshold", out DistanceThreshold, 140f);
            AddOutputValue(inputRect, "IK_Distance", Distance, 140f);
            AddInputValue(inputRect, AngleThresholdString, out AngleThresholdString, "IK_AngleThreshold", out AngleThreshold, 140f);
            AddOutputValue(inputRect, "IK_Angle", Angle, 140f);
            AddInputValue(inputRect, MaxPosErrString, out MaxPosErrString, "IK_MaxPosErr", out MaxPosErr, 140f);
            AddInputValue(inputRect, MaxOriErrString, out MaxOriErrString, "IK_MaxOriErr", out MaxOriErr, 140f);
            AddOutputValue(inputRect, "IK_DinLearningRatePos", DinLearningRatePos, 140f);
            AddOutputValue(inputRect, "IK_DinLearningRateOri", DinLearningRateOri, 140f);
            AddOutputValue(inputRect, "IK_globalPosition", globalPosition, 140f, 110f);
            AddOutputValue(inputRect, "IK_globalRotation", globalQuaternion.eulerAngles, 140f, 110f);
            AddOutputValue(inputRect, "EFF_Position", SortIkServo[SortIkServo.Count - 1].ServoTransform.position, 140f, 110f);
            AddOutputValue(inputRect, "EFF_Rosition", SortIkServo[SortIkServo.Count - 1].ServoTransform.rotation.eulerAngles, 140f, 110f);
            AddOutputValue(inputRect, "distance", distance, 140f);
            AddOutputValue(inputRect, "angle", angle, 140f, 60f);

            // slider of servo speed
            float[] speedSliderValues = { 0.0f, 0.125f, 0.25f, 0.5f, 1.0f, 2.0f, 4.0f };
            servoSpeed = FixValuesLogSlider(new Rect(10, 460, 150, 20), 50f, "speed", servoSpeed, speedSliderValues);
            // slider of control button translation's step
            float[] transSliderValues = { 0.0f, 0.0375f, 0.075f, 0.125f, 0.25f, 0.5f, 1.0f, 2.0f };
            transStep = FixValuesLogSlider(new Rect(10, 480, 150, 20), 50f, "TRLstp", transStep, transSliderValues);
            // slider of control button rotation's step
            float[] rotSliderValues = { 0.0f, 0.0375f, 0.075f, 0.125f, 0.25f, 0.5f, 1.0f, 2.0f };
            rotStep = FixValuesLogSlider(new Rect(10, 500, 150, 20), 50f, "ROTstp", rotStep, rotSliderValues);

            // reset position and rotation of endeffector
            if (GUI.Button(new Rect(257, 460, 45, 25), "origin"))
            {
                globalPosition = baseState.Translation;
                globalQuaternion = baseState.Rotation;
            }

            // set current position and rotation of endeffector
            if (GUI.Button(new Rect(257, 490, 45, 25), "cPos"))
            {
                globalPosition = SortIkServo[SortIkServo.Count - 1].ServoTransform.position;
                globalQuaternion = SortIkServo[SortIkServo.Count - 1].ServoTransform.rotation;
            }

            // set position and rotation of endeffector ???

            Color[] color = { Color.red, Color.yellow };
            LineDiagram(diagramRectangle, data, color);

            GUILayout.EndHorizontal();

            GUI.DragWindow();
        }

        public void AddInputValue(Rect rectangle, string valueInString, out string valueOutString, string name, out int valueInt, float labelLength)
        {
            GUI.Label(new Rect(rectangle.x, rectangle.y + Yoffset, labelLength, rectangle.height), name);
            valueOutString = GUI.TextField(new Rect(rectangle.x + labelLength, rectangle.y + Yoffset, rectangle.width, rectangle.height), valueInString);
            try
            {
                valueInt = int.Parse(valueOutString);
            }
            catch
            {
                valueOutString = valueInString;
                valueInt = int.Parse(valueOutString);
            }
            Yoffset += 20f;
        }

        public void AddInputValue(Rect rectangle, string valueInString, out string valueOutString, string name, out float valueFloat, float labelLength)
        {
            GUI.Label(new Rect(rectangle.x, rectangle.y + Yoffset, labelLength, rectangle.height), name);
            valueOutString = GUI.TextField(new Rect(rectangle.x + labelLength, rectangle.y + Yoffset, rectangle.width, rectangle.height), valueInString);
            try
            {
                valueFloat = float.Parse(valueOutString);
            }
            catch
            {
                valueOutString = valueInString;
                valueFloat = float.Parse(valueOutString);
            }
            Yoffset += 20f;
        }

        public void AddOutputValue(Rect rectangle, string name, float valueFloat, float labelLength)
        {
            GUI.Label(new Rect(rectangle.x, rectangle.y + Yoffset, labelLength, rectangle.height), name);
            GUI.TextField(new Rect(rectangle.x + labelLength, rectangle.y + Yoffset, rectangle.width, rectangle.height), valueFloat.ToString("0.000"));
            Yoffset += 20f;
        }

        public void AddOutputValue(Rect rectangle, string name, float valueFloat, float labelLength, float fieldLength)
        {
            GUI.Label(new Rect(rectangle.x, rectangle.y + Yoffset, labelLength, rectangle.height), name);
            GUI.TextField(new Rect(rectangle.x + labelLength, rectangle.y + Yoffset, fieldLength, rectangle.height), valueFloat.ToString("0.000"));
            Yoffset += 20f;
        }

        private void AddOutputValue(Rect rectangle, string name, Vector3 valueVector3, float labelLength, float fieldLength)
        {
            GUI.Label(new Rect(rectangle.x, rectangle.y + Yoffset, labelLength, rectangle.height), name);
            GUI.TextField(new Rect(rectangle.x + labelLength, rectangle.y + Yoffset, rectangle.width + fieldLength, rectangle.height), VectorToString(valueVector3, "0.00"));
            Yoffset += 20f;
        }

        private float FixValuesSlider(Rect rectangle, float nameLenght, string name, float value, float[] Values)
        {
            float mindiff = Values[Values.Length - 1] - Values[0];
            int index = 0;
            Rect valueRect = rectangle;
            valueRect.x += valueRect.width + nameLenght + 5;
            GUI.Label(rectangle, name);
            GUI.Label(valueRect, value.ToString());
            rectangle.x += nameLenght;
            rectangle.y += 7;
            value = GUI.HorizontalSlider(rectangle, value, Values[0], Values[Values.Length - 1]);
            for (int i = 0; i < Values.Length; i++)
            {
                if (Math.Abs(value - Values[i]) < mindiff)
                {
                    mindiff = Math.Abs(value - Values[i]);
                    index = i;
                }
            }
            value = Values[index];

            return value;
        }

        private float FixValuesLogSlider(Rect rectangle, float nameLenght, string name, float value, float[] Values)
        {
            float[] LogValues = new float[Values.Length];

            for (int i = 0; i < Values.Length; i++)
            {
                if (i == 0)
                    LogValues[0] = Mathf.Log10((Values[1] / 2f));
                else
                    LogValues[i] = Mathf.Log10(Values[i]);
            }

            float mindiff = Values[Values.Length - 1] - Values[0];
            int index = 0;
            Rect valueRect = rectangle;

            valueRect.x += valueRect.width + nameLenght + 5f;
            GUI.Label(rectangle, name);
            GUI.Label(valueRect, value.ToString());
            rectangle.x += nameLenght;

            Rect fixLine = new Rect(rectangle);
            fixLine.width = 10f;
            fixLine.y += 2f;
            Rect fixLineRect = new Rect(fixLine);

            for (int i = 0; i < LogValues.Length; i++)
            {
                float linePosition = (rectangle.width - 12f) / Mathf.Abs(LogValues[0] - LogValues[LogValues.Length - 1]) * (LogValues[i] + LogValues[0] * -1f) + 2f;
                fixLineRect.x = fixLine.x + linePosition;
                GUI.Label(fixLineRect, "│");
            }

            rectangle.y += 6f;
            float valueLog;
            if (value == 0f)
                valueLog = LogValues[0];
            else
                valueLog = Mathf.Log10(value);

            valueLog = GUI.HorizontalSlider(rectangle, valueLog, LogValues[0], LogValues[Values.Length - 1]);
            value = (float)Math.Pow(10d, (double)valueLog);
            for (int i = 0; i < Values.Length; i++)
            {
                if (Math.Abs(value - Values[i]) < mindiff)
                {
                    mindiff = Math.Abs(value - Values[i]);
                    index = i;
                }
            }
            if (index == 0)
                value = 0f;
            else
                value = Values[index];

            return value;
        }

        private void DrawRectangle(Rect rectangle, Color color)
        {
            Drawing.DrawLine(new Vector2(rectangle.x, rectangle.y), new Vector2(rectangle.x + rectangle.width, rectangle.y), color);
            Drawing.DrawLine(new Vector2(rectangle.x, rectangle.y), new Vector2(rectangle.x, rectangle.y + rectangle.height), color);
            Drawing.DrawLine(new Vector2(rectangle.x + rectangle.width, rectangle.y), new Vector2(rectangle.x + rectangle.width, rectangle.y + rectangle.height), color);
            Drawing.DrawLine(new Vector2(rectangle.x, rectangle.y + rectangle.height), new Vector2(rectangle.x + rectangle.width, rectangle.y + rectangle.height), color);
        }

        private void LineDiagram(Rect rectangle, List<float> data, Color color)
        {
            // set border deathzone
            Vector2 border = new Vector2(5, 5);
            Rect realDataField = new Rect(new Vector2(rectangle.x + border.x, rectangle.y + border.y), new Vector2(rectangle.width - (2 * border.x), rectangle.height - (2 * border.y)));
            Rect activeDataField = new Rect(new Vector2(0, 0), new Vector2(rectangle.width - (2 * border.x), rectangle.height - (2 * border.y)));
            // draw border line
            DrawRectangle(rectangle, Color.white);

            //DrawRectangle (realDataField, Color.yellow);

            GUI.BeginGroup(realDataField);
            //GUILayout.BeginArea(realDataField);

            // draw diagram data
            if (data.Count > 1)
            {
                for (int i = 1; i < data.Count; i++)
                {
                    Drawing.DrawLine(new Vector2((float)(i - 1), activeDataField.height - data[i - 1]), new Vector2((float)(i), activeDataField.height - data[i]), color);
                }
            }

            GUI.EndGroup();
            //GUILayout.EndArea();
        }

        private void LineDiagram(Rect rectangle, List<List<float>> data, Color[] color)
        {
            // set border deathzone
            Vector2 border = new Vector2(5, 5);
            Rect realDataField = new Rect(new Vector2(rectangle.x + border.x, rectangle.y + border.y), new Vector2(rectangle.width - (2 * border.x), rectangle.height - (2 * border.y)));
            Rect activeDataField = new Rect(new Vector2(0, 0), new Vector2(rectangle.width - (2 * border.x), rectangle.height - (2 * border.y)));
            // draw border line
            DrawRectangle(rectangle, Color.white);

            //DrawRectangle (realDataField, Color.yellow);

            GUI.BeginGroup(realDataField);
            //GUILayout.BeginArea(realDataField);

            for (int j = 0; j < data.Count; j++)
            {
                // draw diagram data
                if (data[j].Count > 1)
                {
                    for (int i = 1; i < data[j].Count; i++)
                    {
                        Drawing.DrawLine(new Vector2((float)(i - 1), activeDataField.height - (data[j][i - 1] + 1)), new Vector2((float)(i), activeDataField.height - (data[j][i] + 1)), color[j]);
                    }
                }
            }

            GUI.EndGroup();
            //GUILayout.EndArea();
        }
        #endregion GUI

        private bool ImplementServoRotation(List<IKservo> Servos, float[] theta, float speed = 0.25f)
        {
            bool success = true;
            float servoTheta = 0f;

            for (int j = 0; j < SortIkServo.Count - 1; j++)
                if (!double.IsNaN(theta[j]))
                {
                    // blocking fullrotate of servo
                    if (theta[j] > 180f)
                        servoTheta = theta[j] - 360f;
                    else if (theta[j] < -180f)
                        servoTheta = theta[j] + 360f;
                    else
                        servoTheta = theta[j];

                    //SortIkServo[j].iservo.Position
                    //SortIkServo[j].iservo.MoveTo(theta[j], speed);
                    SortIkServo[j].iservo.MoveTo(servoTheta, speed);
                }
                else
                    success = false;
            return success;
        }

        private void GetChildPartRecursive(Part obj)
        {
            if (null == obj)
                return;

            foreach (Part child in obj.children)
            {
                if (null == child)
                    continue;
                listOfChildrenPart.Add(child);
                GetChildPartRecursive(child);
            }
        }

        private string VectorToString(Vector3 vector, string format)
        {
            string szoveg = "";

            szoveg = string.Format("( " + vector.x.ToString(format) + ", " + vector.y.ToString(format) + ", " + vector.z.ToString(format) + " )");

            return szoveg;
        }

        #region Kinematics
        public bool InverseKinematics(Vector3 targetPosition, Quaternion targetOrientation, float[] angles)
        {
            // calculate different of distance and -rotation
            LocationRotationDiff locRotDiff = DistanceAndAngleFromTarget(targetPosition, targetOrientation, angles);

            Distance = locRotDiff.LocationDiff;
            Angle = locRotDiff.RotationDiff;

            // if different lower than threshold (distance and rotation) then stop
            if (locRotDiff.LocationDiff < DistanceThreshold && locRotDiff.RotationDiff < AngleThreshold)
                return true;

            for (int i = 0; i < SortIkServo.Count; i++)
            {
                // Gradient descent
                // Update : Solution -= LearningRate * Gradient

                // calculate partial gradient
                LocationRotationDiff gradient = PartialGradient(targetPosition, targetOrientation, angles, i);

                // calculate dinamic learning rate of location different 
                DinLearningRatePos = locRotDiff.LocationDiff / MaxPosErr * 100.0f;
                // calculate dinamic learning rate of rotation different
                DinLearningRateOri = locRotDiff.RotationDiff / MaxOriErr * 100.0f;

                // calculate angle of joint with location gradient and rotation gradient - why sum ???
                angles[i] -= DinLearningRatePos * gradient.LocationDiff + DinLearningRateOri * gradient.RotationDiff;

                // Clamp - limited angle of joint
                angles[i] = Mathf.Clamp(angles[i], SortIkServo[i].MinAngle, SortIkServo[i].MaxAngle);

                // if different lower than threshold (distance and rotation) then stop
                if (locRotDiff.LocationDiff < DistanceThreshold && locRotDiff.RotationDiff < AngleThreshold)
                    return true;
            }
            return false;
        }

        public LocationRotationDiff PartialGradient(Vector3 targetPosition, Quaternion targetOrientation, float[] angles, int i)
        {
            // Saves the angle,
            // it will be restored later
            float angle = angles[i];
            LocationRotationDiff gradient = new LocationRotationDiff();

            // calculate different
            LocationRotationDiff f_xGlobal = DistanceAndAngleFromTarget(targetPosition, targetOrientation, angles);
            // Gradient : [F(x+SamplingDistance) - F(x)] / h

            // change angles with samplingangle (a little bit)
            angles[i] += SamplingAngle;

            // recalculate different
            LocationRotationDiff f_x_plus_dGlobal = DistanceAndAngleFromTarget(targetPosition, targetOrientation, angles);

            // calculate gradient of position
            gradient.LocationDiff = (f_x_plus_dGlobal.LocationDiff - f_xGlobal.LocationDiff) / SamplingAngle;
            // calculate gradient of orientation
            gradient.RotationDiff = (f_x_plus_dGlobal.RotationDiff - f_xGlobal.RotationDiff) / SamplingAngle;

            // Restore angles
            angles[i] = angle;

            return gradient;
        }

        public LocationRotationDiff DistanceAndAngleFromTarget(Vector3 targetPosition, Quaternion targetOrientation, float[] angles)
        {
            LocationRotationDiff different = new LocationRotationDiff();

            VectorSM DistanceAndAngle = ForwardKinematics(angles, SortIkServo);

            different.LocationDiff = Vector3.Distance(DistanceAndAngle.Translation, targetPosition);

            different.RotationDiff = Quaternion.Angle(DistanceAndAngle.Rotation, targetOrientation);

            return different;
        }

        public VectorSM ForwardKinematics(float[] angles, List<IKservo> Servos)
        {
            VectorSM endEffector = new VectorSM();
            Vector3 prevPoint = Servos[0].Position;
            Quaternion rotation = Quaternion.identity;

            for (int i = 1; i < Servos.Count; i++)
            {
                rotation *= Quaternion.AngleAxis(angles[i - 1], Servos[i - 1].Axis);
                Vector3 nextPoint = prevPoint + rotation * (Servos[i - 1].baseTransformRotation * Servos[i].StartOffset);

                servoGimbal[i - 1].transform.position = prevPoint;
                servoGimbal[i - 1].transform.rotation = rotation * Servos[i - 1].baseTransformRotation;

                prevPoint = nextPoint;
            }

            endEffector.Translation = prevPoint;
            endEffector.Rotation = rotation * Servos[Servos.Count - 2].baseTransformRotation;
            return endEffector;
        }
        #endregion Kinematics
    }
}
